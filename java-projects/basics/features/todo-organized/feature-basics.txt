-------------------------------------------------------------------------------------
Generics
Reflection
Dynamic Proxy
NIO
Concurrency
ServiceLoader
Packaging JAR
equals与hashCode与operator==
Autoboxing and unboxing
JMX
JDK Data Structure
GC
Java Command Options
Input&&Output
File Handling
Exception&&Error
Security
JOL
Clone
JNDI
JVM && Hotspot
-------------------------------------------------------------------------------------
Tutorials
    https://www.geeksforgeeks.org/java/
    https://docs.oracle.com/javase/tutorial/index.html
    http://www.herongyang.com/JDK/
    http://www.herongyang.com/JVM/
    http://www.herongyang.com/Java-GC/
    http://www.herongyang.com/Java-Tools/
    http://www.herongyang.com/Java/
    http://www.herongyang.com/JDK/
-------------------------------------------------------------------------------------
Generics
    https://www.oracle.com/technetwork/articles/java/juneau-generics-2255374.html
    https://docs.oracle.com/javase/tutorial/java/generics/index.html
-------------------------------------------------------------------------------------
Reflection
    https://docs.oracle.com/javase/tutorial/reflect/index.html
-------------------------------------------------------------------------------------
java.util.ServiceLoader
    https://www.oracle.com/technetwork/articles/javase/extensible-137159.html
    https://www.logicbig.com/tutorials/core-java-tutorial/java-se-api/service-loader.html
    https://cxis.me/2017/04/17/Java%E4%B8%ADSPI%E6%9C%BA%E5%88%B6%E6%B7%B1%E5%85%A5%E5%8F%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/
    https://github.com/google/auto/tree/master/service
-------------------------------------------------------------------------------------
Packaging Programs in JAR Files
    https://docs.oracle.com/javase/tutorial/deployment/jar/index.html
-------------------------------------------------------------------------------------
==操作符
    https://stackoverflow.com/questions/7520432/what-is-the-difference-between-and-equals-in-java
    https://stackoverflow.com/questions/1586223/how-does-the-tostring-equals-object-methods-work-differently-or-similar
equals与hashCode方法:
    https://www.geeksforgeeks.org/equals-hashcode-methods-java/
    https://www.geeksforgeeks.org/override-equalsobject-hashcode-method/
    https://stackoverflow.com/questions/27581/what-issues-should-be-considered-when-overriding-equals-and-hashcode-in-java
equals vs  operator==
    https://stackoverflow.com/questions/7520432/what-is-the-difference-between-and-equals-in-java
    https://www.geeksforgeeks.org/difference-equals-method-java/
How to print address of an object?
    https://stackoverflow.com/questions/18396927/how-to-print-the-address-of-an-object-if-you-have-redefined-tostring-method
-------------------------------------------------------------------------------------
Autoboxing and unboxing
https://stackoverflow.com/questions/27647407/why-do-we-use-autoboxing-and-unboxing-in-java
https://docs.oracle.com/javase/tutorial/java/data/autoboxing.html

Converting a primitive value (an int, for example) into an object of the corresponding wrapper class (Integer) is called autoboxing. The Java compiler applies autoboxing when a primitive value is:

* Passed as a parameter to a method that expects an object of the corresponding wrapper class.
* Assigned to a variable of the corresponding wrapper class.

Converting an object of a wrapper type (Integer) to its corresponding primitive (int) value is called unboxing. The Java compiler applies unboxing when an object of a wrapper class is:

* Passed as a parameter to a method that expects a value of the corresponding primitive type.
* Assigned to a variable of the corresponding primitive type.


| Primitive type | Wrapper class |
| -------------- | ------------- |
| boolean        | Boolean       |
| byte           | Byte          |
| char           | Character     |
| float          | Float         |
| int            | Integer       |
| long           | Long          |
| short          | Short         |
| double         | Double        |
-------------------------------------------------------------------------------------
Unsafe && Concurrency
    JMM   && JSR-133   && Java-Concurrency-in-Practice
    https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4

    Java-Unsafe 之 多线程原语&&内存操作
        典型论文总结:java-unsafe-api-paper.pdf
        https://www.cnblogs.com/mickole/articles/3757278.html
        http://www.docjar.com/docs/api/sun/misc/Unsafe.html#getUnsafe
        http://www.docjar.com/html/api/sun/misc/Unsafe.java.html
        http://hg.openjdk.java.net/jdk7u/jdk7u/jdk/file/tip/src/share/classes/sun/misc/Unsafe.java
-------------------------------------------------------------------------------------
JMX
    https://docs.oracle.com/javase/tutorial/jmx/index.html
    https://docs.oracle.com/javase/8/docs/technotes/guides/management/toc.html
    -Dcom.sun.management.jmxremote
    -Dcom.sun.management.jmxremote.port=portNum
    -Dcom.sun.management.jmxremote.authenticate=false
    -Dcom.sun.management.jmxremote.ssl=false
-------------------------------------------------------------------------------------
JDK Data Structure
    Integer Boolean Char Long String Double Float
    BigInteger BigDecimal
    Set系列-(thread-safe)
    List系列-(thread-safe)
    Queue系列-(thread-safe)
    Map系列-(thread-safe)
    Integer 位操作
         http://www.voidcn.com/article/p-dsruacct-bda.html
         https://juejin.im/entry/580a3074128fe1005fc88b30
        HashMap与IdentityHashMap区别,判断key是否相等
        HashMap vs LinkedHashMap vs IdentityHashMap
-------------------------------------------------------------------------------------
GC
    http://www.herongyang.com/Java-GC/
-------------------------------------------------------------------------------------
Java Command Options
    -Djava.security.egd=file:/dev/./urandom
        https://stackoverflow.com/questions/137212/how-to-solve-slow-java-securerandom
        https://ruleoftech.com/2016/avoiding-jvm-delays-caused-by-random-number-generation
        http://www.thezonemanager.com/2015/07/whats-so-special-about-devurandom.html
        https://bugs.openjdk.java.net/browse/JDK-6202721
    -Djava.net.preferIPv4Stack=true
        https://docs.oracle.com/javase/8/docs/api/java/net/doc-files/net-properties.html <br/>
        https://stackoverflow.com/questions/9882357/how-to-set-java-net-preferipv4stack-true-at-runtime <br/>
        https://docs.oracle.com/javase/8/docs/technotes/guides/net/ipv6_guide/ <br/>
        https://github.com/netty/netty/issues/5657 <br/>
    -XX:ErrorFile
        https://docs.oracle.com/javase/8/docs/technotes/guides/troubleshoot/felog001.html <br/>
        https://stackoverflow.com/questions/22618582/java-how-to-specify-jvm-argument-xxerrorfile-and-preserve-automatic-pid-in-fi
    -XX:HeapDumpOnOutOfMemoryError
    -XX:HeapDumpPath
        https://docs.oracle.com/javase/8/docs/technotes/guides/troubleshoot/clopts001.html#CHDFDIJI
    -agentlib:jdwp
        https://docs.oracle.com/javase/8/docs/technotes/tools/unix/jdb.html <br/>
        https://www.ibm.com/support/knowledgecenter/en/SSYKE2_8.0.0/com.ibm.java.80.doc/user/jdb.html
    -Xms256m -Xmx2048m
        Java -X查看非标准项的设置
        https://stackoverflow.com/questions/14763079/what-are-the-xms-and-xmx-parameters-when-starting-jvm
    -XX:+UseG1GC
        https://stackoverflow.com/questions/2881827/how-does-the-garbage-first-garbage-collector-work <br/>
        https://docs.oracle.com/javase/7/docs/technotes/guides/vm/G1.html
    -XX:-OmitStackTraceInFastThrow
        https://stackoverflow.com/questions/2411487/nullpointerexception-in-java-with-no-stacktrace
    -XX:+PrintGCDetails  <br/>
    -XX:+PrintGCDateStamps  <br/>
        https://blog.gceasy.io/2016/02/22/understand-garbage-collection-log/#more-401
    -XX:+PrintGCApplicationConcurrentTime  <br/>
    -XX:+PrintGCApplicationStoppedTime  <br/>
        https://stackoverflow.com/questions/29666057/analyzing-gc-logs/29673564#29673564
        http://www.herongyang.com/Java-GC/

-------------------------------------------------------------------------------------

Security
    https://yq.aliyun.com/articles/57223?&utm_source=qq
    https://www.cnblogs.com/yiwangzhibujian/p/6207212.html
    https://zhuanlan.zhihu.com/p/52032614
    https://www.ibm.com/developerworks/cn/java/j-lo-javasecurity/
    java.security
    https://docs.oracle.com/javase/8/docs/technotes/guides/security/spec/security-specTOC.fm.html
    https://docs.oracle.com/javase/8/docs/technotes/guides/security/permissions.html
    https://docs.oracle.com/javase/8/docs/technotes/guides/security/PolicyFiles.html
    https://docs.oracle.com/javase/tutorial/security/index.html
    https://docs.oracle.com/javase/8/docs/technotes/guides/security/index.html
    https://www.geeksforgeeks.org/java/
    System.getSecurityManager()
    https://docs.oracle.com/javase/tutorial/essential/environment/security.html
    https://stackoverflow.com/questions/5192965/java-security-manager-what-does-it-check
    policy
    https://docs.oracle.com/javase/8/docs/technotes/guides/security/PolicyFiles.html
    permissions
    https://docs.oracle.com/javase/8/docs/technotes/guides/security/permissions.html
    AccessController.doPrivileged
    https://docs.oracle.com/javase/8/docs/technotes/guides/security/doprivileged.html
    https://docs.oracle.com/javase/8/docs/api/java/security/AccessController.html
    https://stackoverflow.com/questions/852453/accesscontroller-doprivileged
    https://stackoverflow.com/questions/2233761/when-should-accesscontroller-doprivileged-be-used
    https://www.programcreek.com/java-api-examples/?class=java.security.AccessController&method=doPrivileged
    https://www.programcreek.com/java-api-examples/java.security.PrivilegedExceptionAction
    选项
    -Djava.security.manager
    -Djava.security.policy=policy-name
-------------------------------------------------------------------------------------
JOL工具
    Java对象在内存的结构
    http://openjdk.java.net/projects/code-tools/jol/
    https://juejin.im/post/6844903832833490957
    核心分析工具
    http://openjdk.java.net/projects/code-tools/
-------------------------------------------------------------------------------------
Clone
    clone方法
        https://www.geeksforgeeks.org/clone-method-in-java-2/
    Deep Copy vs Shallow Copy
    * Shallow copy is method of copying an object and is followed by default in cloning. In this method the fields of an old object X are copied to the new object Y. While copying the object type field the reference is copied to Y i.e object Y will point to same location as pointed out by X. If the field value is a primitive type it copies the value of the primitive type.
    * Therefore, any changes made in referenced objects in object X or Y will be reflected in other object.

    Usage of clone() method – Deep Copy
    * If we want to create a deep copy of object X and place it in a new object Y then new copy of any referenced objects fields are created and these references are placed in object Y. This means any changes made in referenced object fields in object X or Y will be reflected only in that object and not in the other. In below example, we create a deep copy of object.
    * A deep copy copies all fields, and makes copies of dynamically allocated memory pointed to by the fields. A deep copy occurs when an object is copied along with the objects to which it refers.

-------------------------------------------------------------------------------------
JNDI
    Java Naming and Directory Interface (J.N.D.I.) API
    Jini network technology and the Service Location Protocol (SLP)
-------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------
JVM
    https://www.tutorialspoint.com/java_virtual_machine/java_virtual_machine_architecture.htm

-------------------------------------------------------------------------------------
Other
    Java反编译工具（如JD_GUI）

-------------------------------------------------------------------------------------

